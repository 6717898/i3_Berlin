#ifndef THERMISTORTABLES_H_
#define THERMISTORTABLES_H_

#include "Marlin.h"

#define OVERSAMPLENR 16

#if (THERMISTORHEATER_0 == 1) || (THERMISTORHEATER_1 == 1)  || (THERMISTORHEATER_2 == 1) || (THERMISTORBED == 1) //100k bed thermistor

const short temptable_1[][2] PROGMEM = {
{       23*OVERSAMPLENR ,       300     },
{       25*OVERSAMPLENR ,       295     },
{       27*OVERSAMPLENR ,       290     },
{       28*OVERSAMPLENR ,       285     },
{       31*OVERSAMPLENR ,       280     },
{       33*OVERSAMPLENR ,       275     },
{       35*OVERSAMPLENR ,       270     },
{       38*OVERSAMPLENR ,       265     },
{       41*OVERSAMPLENR ,       260     },
{       44*OVERSAMPLENR ,       255     },
{       48*OVERSAMPLENR ,       250     },
{       52*OVERSAMPLENR ,       245     },
{       56*OVERSAMPLENR ,       240     },
{       61*OVERSAMPLENR ,       235     },
{       66*OVERSAMPLENR ,       230     },
{       71*OVERSAMPLENR ,       225     },
{       78*OVERSAMPLENR ,       220     },
{       84*OVERSAMPLENR ,       215     },
{       92*OVERSAMPLENR ,       210     },
{       100*OVERSAMPLENR        ,       205     },
{       109*OVERSAMPLENR        ,       200     },
{       120*OVERSAMPLENR        ,       195     },
{       131*OVERSAMPLENR        ,       190     },
{       143*OVERSAMPLENR        ,       185     },
{       156*OVERSAMPLENR        ,       180     },
{       171*OVERSAMPLENR        ,       175     },
{       187*OVERSAMPLENR        ,       170     },
{       205*OVERSAMPLENR        ,       165     },
{       224*OVERSAMPLENR        ,       160     },
{       245*OVERSAMPLENR        ,       155     },
{       268*OVERSAMPLENR        ,       150     },
{       293*OVERSAMPLENR        ,       145     },
{       320*OVERSAMPLENR        ,       140     },
{       348*OVERSAMPLENR        ,       135     },
{       379*OVERSAMPLENR        ,       130     },
{       411*OVERSAMPLENR        ,       125     },
{       445*OVERSAMPLENR        ,       120     },
{       480*OVERSAMPLENR        ,       115     },
{       516*OVERSAMPLENR        ,       110     },
{       553*OVERSAMPLENR        ,       105     },
{       591*OVERSAMPLENR        ,       100     },
{       628*OVERSAMPLENR        ,       95      },
{       665*OVERSAMPLENR        ,       90      },
{       702*OVERSAMPLENR        ,       85      },
{       737*OVERSAMPLENR        ,       80      },
{       770*OVERSAMPLENR        ,       75      },
{       801*OVERSAMPLENR        ,       70      },
{       830*OVERSAMPLENR        ,       65      },
{       857*OVERSAMPLENR        ,       60      },
{       881*OVERSAMPLENR        ,       55      },
{       903*OVERSAMPLENR        ,       50      },
{       922*OVERSAMPLENR        ,       45      },
{       939*OVERSAMPLENR        ,       40      },
{       954*OVERSAMPLENR        ,       35      },
{       966*OVERSAMPLENR        ,       30      },
{       977*OVERSAMPLENR        ,       25      },
{       985*OVERSAMPLENR        ,       20      },
{       993*OVERSAMPLENR        ,       15      },
{       999*OVERSAMPLENR        ,       10      },
{       1004*OVERSAMPLENR       ,       5       },
{       1008*OVERSAMPLENR       ,       0       } //safety
};
#endif
#if (THERMISTORHEATER_0 == 2) || (THERMISTORHEATER_1 == 2) || (THERMISTORHEATER_2 == 2) || (THERMISTORBED == 2) //200k bed thermistor
const short temptable_2[][2] PROGMEM = {
//200k ATC Semitec 204GT-2
//Verified by linagee. Source: http://shop.arcol.hu/static/datasheets/thermistors.pdf
// Calculated using 4.7kohm pullup, voltage divider math, and manufacturer provided temp/resistance
   {1*OVERSAMPLENR, 848},
   {30*OVERSAMPLENR, 300}, //top rating 300C
   {34*OVERSAMPLENR, 290},
   {39*OVERSAMPLENR, 280},
   {46*OVERSAMPLENR, 270},
   {53*OVERSAMPLENR, 260},
   {63*OVERSAMPLENR, 250},
   {74*OVERSAMPLENR, 240},
   {87*OVERSAMPLENR, 230},
   {104*OVERSAMPLENR, 220},
   {124*OVERSAMPLENR, 210},
   {148*OVERSAMPLENR, 200},
   {176*OVERSAMPLENR, 190},
   {211*OVERSAMPLENR, 180},
   {252*OVERSAMPLENR, 170},
   {301*OVERSAMPLENR, 160},
   {357*OVERSAMPLENR, 150},
   {420*OVERSAMPLENR, 140},
   {489*OVERSAMPLENR, 130},
   {562*OVERSAMPLENR, 120},
   {636*OVERSAMPLENR, 110},
   {708*OVERSAMPLENR, 100},
   {775*OVERSAMPLENR, 90},
   {835*OVERSAMPLENR, 80},
   {884*OVERSAMPLENR, 70},
   {924*OVERSAMPLENR, 60},
   {955*OVERSAMPLENR, 50},
   {977*OVERSAMPLENR, 40},
   {993*OVERSAMPLENR, 30},
   {1004*OVERSAMPLENR, 20},
   {1012*OVERSAMPLENR, 10},
   {1016*OVERSAMPLENR, 0},
};

#endif
#if (THERMISTORHEATER_0 == 3) || (THERMISTORHEATER_1 == 3) || (THERMISTORHEATER_2 == 3) || (THERMISTORBED == 3) //mendel-parts
const short temptable_3[][2] PROGMEM = {
                {1*OVERSAMPLENR,864},
                {21*OVERSAMPLENR,300},
                {25*OVERSAMPLENR,290},
                {29*OVERSAMPLENR,280},
                {33*OVERSAMPLENR,270},
                {39*OVERSAMPLENR,260},
                {46*OVERSAMPLENR,250},
                {54*OVERSAMPLENR,240},
                {64*OVERSAMPLENR,230},
                {75*OVERSAMPLENR,220},
                {90*OVERSAMPLENR,210},
                {107*OVERSAMPLENR,200},
                {128*OVERSAMPLENR,190},
                {154*OVERSAMPLENR,180},
                {184*OVERSAMPLENR,170},
                {221*OVERSAMPLENR,160},
                {265*OVERSAMPLENR,150},
                {316*OVERSAMPLENR,140},
                {375*OVERSAMPLENR,130},
                {441*OVERSAMPLENR,120},
                {513*OVERSAMPLENR,110},
                {588*OVERSAMPLENR,100},
                {734*OVERSAMPLENR,80},
                {856*OVERSAMPLENR,60},
                {938*OVERSAMPLENR,40},
                {986*OVERSAMPLENR,20},
                {1008*OVERSAMPLENR,0},
                {1018*OVERSAMPLENR,-20}
        };

#endif
#if (THERMISTORHEATER_0 == 4) || (THERMISTORHEATER_1 == 4) || (THERMISTORHEATER_2 == 4) || (THERMISTORBED == 4) //10k thermistor
const short temptable_4[][2] PROGMEM = {
   {1*OVERSAMPLENR, 430},
   {54*OVERSAMPLENR, 137},
   {107*OVERSAMPLENR, 107},
   {160*OVERSAMPLENR, 91},
   {213*OVERSAMPLENR, 80},
   {266*OVERSAMPLENR, 71},
   {319*OVERSAMPLENR, 64},
   {372*OVERSAMPLENR, 57},
   {425*OVERSAMPLENR, 51},
   {478*OVERSAMPLENR, 46},
   {531*OVERSAMPLENR, 41},
   {584*OVERSAMPLENR, 35},
   {637*OVERSAMPLENR, 30},
   {690*OVERSAMPLENR, 25},
   {743*OVERSAMPLENR, 20},
   {796*OVERSAMPLENR, 14},
   {849*OVERSAMPLENR, 7},
   {902*OVERSAMPLENR, 0},
   {955*OVERSAMPLENR, -11},
   {1008*OVERSAMPLENR, -35}
};
#endif

#if (THERMISTORHEATER_0 == 5) || (THERMISTORHEATER_1 == 5) || (THERMISTORHEATER_2 == 5) || (THERMISTORBED == 5) //100k ParCan thermistor (104GT-2)
const short temptable_5[][2] PROGMEM = {
// ATC Semitec 104GT-2 (Used in ParCan)
// Verified by linagee. Source: http://shop.arcol.hu/static/datasheets/thermistors.pdf
// Calculated using 4.7kohm pullup, voltage divider math, and manufacturer provided temp/resistance
   {1*OVERSAMPLENR, 713},
   {17*OVERSAMPLENR, 300}, //top rating 300C
   {20*OVERSAMPLENR, 290},
   {23*OVERSAMPLENR, 280},
   {27*OVERSAMPLENR, 270},
   {31*OVERSAMPLENR, 260},
   {37*OVERSAMPLENR, 250},
   {43*OVERSAMPLENR, 240},
   {51*OVERSAMPLENR, 230},
   {61*OVERSAMPLENR, 220},
   {73*OVERSAMPLENR, 210},
   {87*OVERSAMPLENR, 200},
   {106*OVERSAMPLENR, 190},
   {128*OVERSAMPLENR, 180},
   {155*OVERSAMPLENR, 170},
   {189*OVERSAMPLENR, 160},
   {230*OVERSAMPLENR, 150},
   {278*OVERSAMPLENR, 140},
   {336*OVERSAMPLENR, 130},
   {402*OVERSAMPLENR, 120},
   {476*OVERSAMPLENR, 110},
   {554*OVERSAMPLENR, 100},
   {635*OVERSAMPLENR, 90},
   {713*OVERSAMPLENR, 80},
   {784*OVERSAMPLENR, 70},
   {846*OVERSAMPLENR, 60},
   {897*OVERSAMPLENR, 50},
   {937*OVERSAMPLENR, 40},
   {966*OVERSAMPLENR, 30},
   {986*OVERSAMPLENR, 20},
   {1000*OVERSAMPLENR, 10},
   {1010*OVERSAMPLENR, 0}
};
#endif

#if (THERMISTORHEATER_0 == 6) || (THERMISTORHEATER_1 == 6) || (THERMISTORHEATER_2 == 6) || (THERMISTORBED == 6) // 100k Epcos thermistor
const short temptable_6[][2] PROGMEM = {
   {1*OVERSAMPLENR, 350},
   {28*OVERSAMPLENR, 250}, //top rating 250C
   {31*OVERSAMPLENR, 245},
   {35*OVERSAMPLENR, 240},
   {39*OVERSAMPLENR, 235},
   {42*OVERSAMPLENR, 230},
   {44*OVERSAMPLENR, 225},
   {49*OVERSAMPLENR, 220},
   {53*OVERSAMPLENR, 215},
   {62*OVERSAMPLENR, 210},
   {71*OVERSAMPLENR, 205}, //fitted graphically
   {78*OVERSAMPLENR, 200}, //fitted graphically
   {94*OVERSAMPLENR, 190},
   {102*OVERSAMPLENR, 185},
   {116*OVERSAMPLENR, 170},
   {143*OVERSAMPLENR, 160},
   {183*OVERSAMPLENR, 150},
   {223*OVERSAMPLENR, 140},
   {270*OVERSAMPLENR, 130},
   {318*OVERSAMPLENR, 120},
   {383*OVERSAMPLENR, 110},
   {413*OVERSAMPLENR, 105},
   {439*OVERSAMPLENR, 100},
   {484*OVERSAMPLENR, 95},
   {513*OVERSAMPLENR, 90},
   {607*OVERSAMPLENR, 80},
   {664*OVERSAMPLENR, 70},
   {781*OVERSAMPLENR, 60},
   {810*OVERSAMPLENR, 55},
   {849*OVERSAMPLENR, 50},
   {914*OVERSAMPLENR, 45},
   {914*OVERSAMPLENR, 40},
   {935*OVERSAMPLENR, 35},
   {954*OVERSAMPLENR, 30},
   {970*OVERSAMPLENR, 25},
   {978*OVERSAMPLENR, 22},
   {1008*OVERSAMPLENR, 3},
   {1023*OVERSAMPLENR, 0}  //to allow internal 0 degrees C
};
#endif

#if (THERMISTORHEATER_0 == 7) || (THERMISTORHEATER_1 == 7) || (THERMISTORHEATER_2 == 7) || (THERMISTORBED == 7) // 100k Honeywell 135-104LAG-J01
const short temptable_7[][2] PROGMEM = {
   {1*OVERSAMPLENR, 941},
   {19*OVERSAMPLENR, 362},
   {37*OVERSAMPLENR, 299}, //top rating 300C
   {55*OVERSAMPLENR, 266},
   {73*OVERSAMPLENR, 245},
   {91*OVERSAMPLENR, 229},
   {109*OVERSAMPLENR, 216},
   {127*OVERSAMPLENR, 206},
   {145*OVERSAMPLENR, 197},
   {163*OVERSAMPLENR, 190},
   {181*OVERSAMPLENR, 183},
   {199*OVERSAMPLENR, 177},
   {217*OVERSAMPLENR, 171},
   {235*OVERSAMPLENR, 166},
   {253*OVERSAMPLENR, 162},
   {271*OVERSAMPLENR, 157},
   {289*OVERSAMPLENR, 153},
   {307*OVERSAMPLENR, 149},
   {325*OVERSAMPLENR, 146},
   {343*OVERSAMPLENR, 142},
   {361*OVERSAMPLENR, 139},
   {379*OVERSAMPLENR, 135},
   {397*OVERSAMPLENR, 132},
   {415*OVERSAMPLENR, 129},
   {433*OVERSAMPLENR, 126},
   {451*OVERSAMPLENR, 123},
   {469*OVERSAMPLENR, 121},
   {487*OVERSAMPLENR, 118},
   {505*OVERSAMPLENR, 115},
   {523*OVERSAMPLENR, 112},
   {541*OVERSAMPLENR, 110},
   {559*OVERSAMPLENR, 107},
   {577*OVERSAMPLENR, 105},
   {595*OVERSAMPLENR, 102},
   {613*OVERSAMPLENR, 99},
   {631*OVERSAMPLENR, 97},
   {649*OVERSAMPLENR, 94},
   {667*OVERSAMPLENR, 92},
   {685*OVERSAMPLENR, 89},
   {703*OVERSAMPLENR, 86},
   {721*OVERSAMPLENR, 84},
   {739*OVERSAMPLENR, 81},
   {757*OVERSAMPLENR, 78},
   {775*OVERSAMPLENR, 75},
   {793*OVERSAMPLENR, 72},
   {811*OVERSAMPLENR, 69},
   {829*OVERSAMPLENR, 66},
   {847*OVERSAMPLENR, 62},
   {865*OVERSAMPLENR, 59},
   {883*OVERSAMPLENR, 55},
   {901*OVERSAMPLENR, 51},
   {919*OVERSAMPLENR, 46},
   {937*OVERSAMPLENR, 41},
   {955*OVERSAMPLENR, 35},
   {973*OVERSAMPLENR, 27},
   {991*OVERSAMPLENR, 17},
   {1009*OVERSAMPLENR, 1},
   {1023*OVERSAMPLENR, 0}  //to allow internal 0 degrees C
};
#endif

#if (THERMISTORHEATER_0 == 71) || (THERMISTORHEATER_1 == 71) || (THERMISTORHEATER_2 == 71) || (THERMISTORBED == 71) // 100k Honeywell 135-104LAF-J01
// R0 = 100000 Ohm
// T0 = 25 °C
// Beta = 3974
// R1 = 0 Ohm
// R2 = 4700 Ohm
const short temptable_71[][2] PROGMEM = {
   {35*OVERSAMPLENR, 300},
   {51*OVERSAMPLENR, 270},
   {54*OVERSAMPLENR, 265},
   {58*OVERSAMPLENR, 260},
   {59*OVERSAMPLENR, 258},
   {61*OVERSAMPLENR, 256},
   {63*OVERSAMPLENR, 254},
   {64*OVERSAMPLENR, 252},
   {66*OVERSAMPLENR, 250},
   {67*OVERSAMPLENR, 249},
   {68*OVERSAMPLENR, 248},
   {69*OVERSAMPLENR, 247},
   {70*OVERSAMPLENR, 246},
   {71*OVERSAMPLENR, 245},
   {72*OVERSAMPLENR, 244},
   {73*OVERSAMPLENR, 243},
   {74*OVERSAMPLENR, 242},
   {75*OVERSAMPLENR, 241},
   {76*OVERSAMPLENR, 240},
   {77*OVERSAMPLENR, 239},
   {78*OVERSAMPLENR, 238},
   {79*OVERSAMPLENR, 237},
   {80*OVERSAMPLENR, 236},
   {81*OVERSAMPLENR, 235},
   {82*OVERSAMPLENR, 234},
   {84*OVERSAMPLENR, 233},
   {85*OVERSAMPLENR, 232},
   {86*OVERSAMPLENR, 231},
   {87*OVERSAMPLENR, 230},
   {89*OVERSAMPLENR, 229},
   {90*OVERSAMPLENR, 228},
   {91*OVERSAMPLENR, 227},
   {92*OVERSAMPLENR, 226},
   {94*OVERSAMPLENR, 225},
   {95*OVERSAMPLENR, 224},
   {97*OVERSAMPLENR, 223},
   {98*OVERSAMPLENR, 222},
   {99*OVERSAMPLENR, 221},
   {101*OVERSAMPLENR, 220},
   {102*OVERSAMPLENR, 219},
   {104*OVERSAMPLENR, 218},
   {106*OVERSAMPLENR, 217},
   {107*OVERSAMPLENR, 216},
   {109*OVERSAMPLENR, 215},
   {110*OVERSAMPLENR, 214},
   {112*OVERSAMPLENR, 213},
   {114*OVERSAMPLENR, 212},
   {115*OVERSAMPLENR, 211},
   {117*OVERSAMPLENR, 210},
   {119*OVERSAMPLENR, 209},
   {121*OVERSAMPLENR, 208},
   {123*OVERSAMPLENR, 207},
   {125*OVERSAMPLENR, 206},
   {126*OVERSAMPLENR, 205},
   {128*OVERSAMPLENR, 204},
   {130*OVERSAMPLENR, 203},
   {132*OVERSAMPLENR, 202},
   {134*OVERSAMPLENR, 201},
   {136*OVERSAMPLENR, 200},
   {139*OVERSAMPLENR, 199},
   {141*OVERSAMPLENR, 198},
   {143*OVERSAMPLENR, 197},
   {145*OVERSAMPLENR, 196},
   {147*OVERSAMPLENR, 195},
   {150*OVERSAMPLENR, 194},
   {152*OVERSAMPLENR, 193},
   {154*OVERSAMPLENR, 192},
   {157*OVERSAMPLENR, 191},
   {159*OVERSAMPLENR, 190},
   {162*OVERSAMPLENR, 189},
   {164*OVERSAMPLENR, 188},
   {167*OVERSAMPLENR, 187},
   {170*OVERSAMPLENR, 186},
   {172*OVERSAMPLENR, 185},
   {175*OVERSAMPLENR, 184},
   {178*OVERSAMPLENR, 183},
   {181*OVERSAMPLENR, 182},
   {184*OVERSAMPLENR, 181},
   {187*OVERSAMPLENR, 180},
   {190*OVERSAMPLENR, 179},
   {193*OVERSAMPLENR, 178},
   {196*OVERSAMPLENR, 177},
   {199*OVERSAMPLENR, 176},
   {202*OVERSAMPLENR, 175},
   {205*OVERSAMPLENR, 174},
   {208*OVERSAMPLENR, 173},
   {212*OVERSAMPLENR, 172},
   {215*OVERSAMPLENR, 171},
   {219*OVERSAMPLENR, 170},
   {237*OVERSAMPLENR, 165},
   {256*OVERSAMPLENR, 160},
   {300*OVERSAMPLENR, 150},
   {351*OVERSAMPLENR, 140},
   {470*OVERSAMPLENR, 120},
   {504*OVERSAMPLENR, 115},
   {538*OVERSAMPLENR, 110},
   {552*OVERSAMPLENR, 108},
   {566*OVERSAMPLENR, 106},
   {580*OVERSAMPLENR, 104},
   {594*OVERSAMPLENR, 102},
   {608*OVERSAMPLENR, 100},
   {622*OVERSAMPLENR, 98},
   {636*OVERSAMPLENR, 96},
   {650*OVERSAMPLENR, 94},
   {664*OVERSAMPLENR, 92},
   {678*OVERSAMPLENR, 90},
   {712*OVERSAMPLENR, 85},
   {745*OVERSAMPLENR, 80},
   {758*OVERSAMPLENR, 78},
   {770*OVERSAMPLENR, 76},
   {783*OVERSAMPLENR, 74},
   {795*OVERSAMPLENR, 72},
   {806*OVERSAMPLENR, 70},
   {818*OVERSAMPLENR, 68},
   {829*OVERSAMPLENR, 66},
   {840*OVERSAMPLENR, 64},
   {850*OVERSAMPLENR, 62},
   {860*OVERSAMPLENR, 60},
   {870*OVERSAMPLENR, 58},
   {879*OVERSAMPLENR, 56},
   {888*OVERSAMPLENR, 54},
   {897*OVERSAMPLENR, 52},
   {905*OVERSAMPLENR, 50},
   {924*OVERSAMPLENR, 45},
   {940*OVERSAMPLENR, 40},
   {955*OVERSAMPLENR, 35},
   {967*OVERSAMPLENR, 30},
   {970*OVERSAMPLENR, 29},
   {972*OVERSAMPLENR, 28},
   {974*OVERSAMPLENR, 27},
   {976*OVERSAMPLENR, 26},
   {978*OVERSAMPLENR, 25},
   {980*OVERSAMPLENR, 24},
   {982*OVERSAMPLENR, 23},
   {984*OVERSAMPLENR, 22},
   {985*OVERSAMPLENR, 21},
   {987*OVERSAMPLENR, 20},
   {995*OVERSAMPLENR, 15},
   {1001*OVERSAMPLENR, 10},
   {1006*OVERSAMPLENR, 5},
   {1010*OVERSAMPLENR, 0},
};
#endif

#if (THERMISTORHEATER_0 == 8) || (THERMISTORHEATER_1 == 8) || (THERMISTORHEATER_2 == 8) || (THERMISTORBED == 8)
// 100k 0603 SMD Vishay NTCS0603E3104FXT (4.7k pullup)
const short temptable_8[][2] PROGMEM = {
   {1*OVERSAMPLENR, 704},
   {54*OVERSAMPLENR, 216},
   {107*OVERSAMPLENR, 175},
   {160*OVERSAMPLENR, 152},
   {213*OVERSAMPLENR, 137},
   {266*OVERSAMPLENR, 125},
   {319*OVERSAMPLENR, 115},
   {372*OVERSAMPLENR, 106},
   {425*OVERSAMPLENR, 99},
   {478*OVERSAMPLENR, 91},
   {531*OVERSAMPLENR, 85},
   {584*OVERSAMPLENR, 78},
   {637*OVERSAMPLENR, 71},
   {690*OVERSAMPLENR, 65},
   {743*OVERSAMPLENR, 58},
   {796*OVERSAMPLENR, 50},
   {849*OVERSAMPLENR, 42},
   {902*OVERSAMPLENR, 31},
   {955*OVERSAMPLENR, 17},
   {1008*OVERSAMPLENR, 0}
};
#endif
#if (THERMISTORHEATER_0 == 9) || (THERMISTORHEATER_1 == 9) || (THERMISTORHEATER_2 == 9) || (THERMISTORBED == 9)
// 100k GE Sensing AL03006-58.2K-97-G1 (4.7k pullup)
const short temptable_9[][2] PROGMEM = {
	{1*OVERSAMPLENR, 936},
	{36*OVERSAMPLENR, 300},
	{71*OVERSAMPLENR, 246},
	{106*OVERSAMPLENR, 218},
	{141*OVERSAMPLENR, 199},
	{176*OVERSAMPLENR, 185},
	{211*OVERSAMPLENR, 173},
	{246*OVERSAMPLENR, 163},
	{281*OVERSAMPLENR, 155},
	{316*OVERSAMPLENR, 147},
	{351*OVERSAMPLENR, 140},
	{386*OVERSAMPLENR, 134},
	{421*OVERSAMPLENR, 128},
	{456*OVERSAMPLENR, 122},
	{491*OVERSAMPLENR, 117},
	{526*OVERSAMPLENR, 112},
	{561*OVERSAMPLENR, 107},
	{596*OVERSAMPLENR, 102},
	{631*OVERSAMPLENR, 97},
	{666*OVERSAMPLENR, 92},
	{701*OVERSAMPLENR, 87},
	{736*OVERSAMPLENR, 81},
	{771*OVERSAMPLENR, 76},
	{806*OVERSAMPLENR, 70},
	{841*OVERSAMPLENR, 63},
	{876*OVERSAMPLENR, 56},
	{911*OVERSAMPLENR, 48},
	{946*OVERSAMPLENR, 38},
	{981*OVERSAMPLENR, 23},
	{1005*OVERSAMPLENR, 5},
	{1016*OVERSAMPLENR, 0}
};
#endif
#if (THERMISTORHEATER_0 == 10) || (THERMISTORHEATER_1 == 10) || (THERMISTORHEATER_2 == 10) || (THERMISTORBED == 10)
// 100k RS thermistor 198-961 (4.7k pullup)
const short temptable_10[][2] PROGMEM = {
   {1*OVERSAMPLENR, 929},
   {36*OVERSAMPLENR, 299},
   {71*OVERSAMPLENR, 246},
   {106*OVERSAMPLENR, 217},
   {141*OVERSAMPLENR, 198},
   {176*OVERSAMPLENR, 184},
   {211*OVERSAMPLENR, 173},
   {246*OVERSAMPLENR, 163},
   {281*OVERSAMPLENR, 154},
   {316*OVERSAMPLENR, 147},
   {351*OVERSAMPLENR, 140},
   {386*OVERSAMPLENR, 134},
   {421*OVERSAMPLENR, 128},
   {456*OVERSAMPLENR, 122},
   {491*OVERSAMPLENR, 117},
   {526*OVERSAMPLENR, 112},
   {561*OVERSAMPLENR, 107},
   {596*OVERSAMPLENR, 102},
   {631*OVERSAMPLENR, 97},
   {666*OVERSAMPLENR, 91},
   {701*OVERSAMPLENR, 86},
   {736*OVERSAMPLENR, 81},
   {771*OVERSAMPLENR, 76},
   {806*OVERSAMPLENR, 70},
   {841*OVERSAMPLENR, 63},
   {876*OVERSAMPLENR, 56},
   {911*OVERSAMPLENR, 48},
   {946*OVERSAMPLENR, 38},
   {981*OVERSAMPLENR, 23},
   {1005*OVERSAMPLENR, 5},
   {1016*OVERSAMPLENR, 0}
};
#endif

#if (THERMISTORHEATER_0 == 20) || (THERMISTORHEATER_1 == 20) || (THERMISTORHEATER_2 == 20) || (THERMISTORBED == 20) // PT100 with INA826 amp on Ultimaker v2.0 electronics
/* The PT100 in the Ultimaker v2.0 electronics has a high sample value for a high temperature.
This does not match the normal thermistor behaviour so we need to set the following defines */
#if (THERMISTORHEATER_0 == 20)
# define HEATER_0_RAW_HI_TEMP 16383
# define HEATER_0_RAW_LO_TEMP 0
#endif
#if (THERMISTORHEATER_1 == 20)
# define HEATER_1_RAW_HI_TEMP 16383
# define HEATER_1_RAW_LO_TEMP 0
#endif
#if (THERMISTORHEATER_2 == 20)
# define HEATER_2_RAW_HI_TEMP 16383
# define HEATER_2_RAW_LO_TEMP 0
#endif
#if (THERMISTORBED == 20)
# define HEATER_BED_RAW_HI_TEMP 16383
# define HEATER_BED_RAW_LO_TEMP 0
#endif
const short temptable_20[][2] PROGMEM = {
{         0*OVERSAMPLENR ,       0     },
{       227*OVERSAMPLENR ,       1     },
{       236*OVERSAMPLENR ,       10     },
{       245*OVERSAMPLENR ,       20     },
{       253*OVERSAMPLENR ,       30     },
{       262*OVERSAMPLENR ,       40     },
{       270*OVERSAMPLENR ,       50     },
{       279*OVERSAMPLENR ,       60     },
{       287*OVERSAMPLENR ,       70     },
{       295*OVERSAMPLENR ,       80     },
{       304*OVERSAMPLENR ,       90     },
{       312*OVERSAMPLENR ,       100     },
{       320*OVERSAMPLENR ,       110     },
{       329*OVERSAMPLENR ,       120     },
{       337*OVERSAMPLENR ,       130     },
{       345*OVERSAMPLENR ,       140     },
{       353*OVERSAMPLENR ,       150     },
{       361*OVERSAMPLENR ,       160     },
{       369*OVERSAMPLENR ,       170     },
{       377*OVERSAMPLENR ,       180     },
{       385*OVERSAMPLENR ,       190     },
{       393*OVERSAMPLENR ,       200     },
{       401*OVERSAMPLENR ,       210     },
{       409*OVERSAMPLENR ,       220     },
{       417*OVERSAMPLENR ,       230     },
{       424*OVERSAMPLENR ,       240     },
{       432*OVERSAMPLENR ,       250     },
{       440*OVERSAMPLENR ,       260     },
{       447*OVERSAMPLENR ,       270     },
{       455*OVERSAMPLENR ,       280     },
{       463*OVERSAMPLENR ,       290     },
{       470*OVERSAMPLENR ,       300     },
{       478*OVERSAMPLENR ,       310     },
{       485*OVERSAMPLENR ,       320     },
{       493*OVERSAMPLENR ,       330     },
{       500*OVERSAMPLENR ,       340     },
{       507*OVERSAMPLENR ,       350     },
{       515*OVERSAMPLENR ,       360     },
{       522*OVERSAMPLENR ,       370     },
{       529*OVERSAMPLENR ,       380     },
{       537*OVERSAMPLENR ,       390     },
{       544*OVERSAMPLENR ,       400     },
{       614*OVERSAMPLENR ,       500     },
{       681*OVERSAMPLENR ,       600     },
{       744*OVERSAMPLENR ,       700     },
{       805*OVERSAMPLENR ,       800     },
{       862*OVERSAMPLENR ,       900     },
{       917*OVERSAMPLENR ,       1000     },
{       968*OVERSAMPLENR ,       1100     }
};
#endif

#if (THERMISTORHEATER_0 == 51) || (THERMISTORHEATER_1 == 51) || (THERMISTORHEATER_2 == 51) || (THERMISTORBED == 51)
// 100k EPCOS (WITH 1kohm RESISTOR FOR PULLUP, R9 ON SANGUINOLOLU! NOT FOR 4.7kohm PULLUP! THIS IS NOT NORMAL!)
// Verified by linagee.
// Calculated using 1kohm pullup, voltage divider math, and manufacturer provided temp/resistance
// Advantage: Twice the resolution and better linearity from 150C to 200C
const short temptable_51[][2] PROGMEM = {
   {1*OVERSAMPLENR, 350},
   {190*OVERSAMPLENR, 250}, //top rating 250C
   {203*OVERSAMPLENR, 245},
   {217*OVERSAMPLENR, 240},
   {232*OVERSAMPLENR, 235},
   {248*OVERSAMPLENR, 230},
   {265*OVERSAMPLENR, 225},
   {283*OVERSAMPLENR, 220},
   {302*OVERSAMPLENR, 215},
   {322*OVERSAMPLENR, 210},
   {344*OVERSAMPLENR, 205},
   {366*OVERSAMPLENR, 200},
   {390*OVERSAMPLENR, 195},
   {415*OVERSAMPLENR, 190},
   {440*OVERSAMPLENR, 185},
   {467*OVERSAMPLENR, 180},
   {494*OVERSAMPLENR, 175},
   {522*OVERSAMPLENR, 170},
   {551*OVERSAMPLENR, 165},
   {580*OVERSAMPLENR, 160},
   {609*OVERSAMPLENR, 155},
   {638*OVERSAMPLENR, 150},
   {666*OVERSAMPLENR, 145},
   {695*OVERSAMPLENR, 140},
   {722*OVERSAMPLENR, 135},
   {749*OVERSAMPLENR, 130},
   {775*OVERSAMPLENR, 125},
   {800*OVERSAMPLENR, 120},
   {823*OVERSAMPLENR, 115},
   {845*OVERSAMPLENR, 110},
   {865*OVERSAMPLENR, 105},
   {884*OVERSAMPLENR, 100},
   {901*OVERSAMPLENR, 95},
   {917*OVERSAMPLENR, 90},
   {932*OVERSAMPLENR, 85},
   {944*OVERSAMPLENR, 80},
   {956*OVERSAMPLENR, 75},
   {966*OVERSAMPLENR, 70},
   {975*OVERSAMPLENR, 65},
   {982*OVERSAMPLENR, 60},
   {989*OVERSAMPLENR, 55},
   {995*OVERSAMPLENR, 50},
   {1000*OVERSAMPLENR, 45},
   {1004*OVERSAMPLENR, 40},
   {1007*OVERSAMPLENR, 35},
   {1010*OVERSAMPLENR, 30},
   {1013*OVERSAMPLENR, 25},
   {1015*OVERSAMPLENR, 20},
   {1017*OVERSAMPLENR, 15},
   {1018*OVERSAMPLENR, 10},
   {1019*OVERSAMPLENR, 5},
   {1020*OVERSAMPLENR, 0},
   {1021*OVERSAMPLENR, -5}
};
#endif

#if (THERMISTORHEATER_0 == 52) || (THERMISTORHEATER_1 == 52) || (THERMISTORHEATER_2 == 52) || (THERMISTORBED == 52) 
// 200k ATC Semitec 204GT-2 (WITH 1kohm RESISTOR FOR PULLUP, R9 ON SANGUINOLOLU! NOT FOR 4.7kohm PULLUP! THIS IS NOT NORMAL!)
// Verified by linagee. Source: http://shop.arcol.hu/static/datasheets/thermistors.pdf
// Calculated using 1kohm pullup, voltage divider math, and manufacturer provided temp/resistance
// Advantage: More resolution and better linearity from 150C to 200C
const short temptable_52[][2] PROGMEM = {
   {1*OVERSAMPLENR, 500},
   {125*OVERSAMPLENR, 300}, //top rating 300C
   {142*OVERSAMPLENR, 290},
   {162*OVERSAMPLENR, 280},
   {185*OVERSAMPLENR, 270},
   {211*OVERSAMPLENR, 260},
   {240*OVERSAMPLENR, 250},
   {274*OVERSAMPLENR, 240},
   {312*OVERSAMPLENR, 230},
   {355*OVERSAMPLENR, 220},
   {401*OVERSAMPLENR, 210},
   {452*OVERSAMPLENR, 200},
   {506*OVERSAMPLENR, 190},
   {563*OVERSAMPLENR, 180},
   {620*OVERSAMPLENR, 170},
   {677*OVERSAMPLENR, 160},
   {732*OVERSAMPLENR, 150},
   {783*OVERSAMPLENR, 140},
   {830*OVERSAMPLENR, 130},
   {871*OVERSAMPLENR, 120},
   {906*OVERSAMPLENR, 110},
   {935*OVERSAMPLENR, 100},
   {958*OVERSAMPLENR, 90},
   {976*OVERSAMPLENR, 80},
   {990*OVERSAMPLENR, 70},
   {1000*OVERSAMPLENR, 60},
   {1008*OVERSAMPLENR, 50},
   {1013*OVERSAMPLENR, 40},
   {1017*OVERSAMPLENR, 30},
   {1019*OVERSAMPLENR, 20},
   {1021*OVERSAMPLENR, 10},
   {1022*OVERSAMPLENR, 0}
};
#endif

#if (THERMISTORHEATER_0 == 55) || (THERMISTORHEATER_1 == 55) || (THERMISTORHEATER_2 == 55) || (THERMISTORBED == 55) 
// 100k ATC Semitec 104GT-2 (Used on ParCan) (WITH 1kohm RESISTOR FOR PULLUP, R9 ON SANGUINOLOLU! NOT FOR 4.7kohm PULLUP! THIS IS NOT NORMAL!)
// Verified by linagee. Source: http://shop.arcol.hu/static/datasheets/thermistors.pdf
// Calculated using 1kohm pullup, voltage divider math, and manufacturer provided temp/resistance
// Advantage: More resolution and better linearity from 150C to 200C
const short temptable_55[][2] PROGMEM = {
   {1*OVERSAMPLENR, 500},
   {76*OVERSAMPLENR, 300},
   {87*OVERSAMPLENR, 290},
   {100*OVERSAMPLENR, 280},
   {114*OVERSAMPLENR, 270},
   {131*OVERSAMPLENR, 260},
   {152*OVERSAMPLENR, 250},
   {175*OVERSAMPLENR, 240},
   {202*OVERSAMPLENR, 230},
   {234*OVERSAMPLENR, 220},
   {271*OVERSAMPLENR, 210},
   {312*OVERSAMPLENR, 200},
   {359*OVERSAMPLENR, 190},
   {411*OVERSAMPLENR, 180},
   {467*OVERSAMPLENR, 170},
   {527*OVERSAMPLENR, 160},
   {590*OVERSAMPLENR, 150},
   {652*OVERSAMPLENR, 140},
   {713*OVERSAMPLENR, 130},
   {770*OVERSAMPLENR, 120},
   {822*OVERSAMPLENR, 110},
   {867*OVERSAMPLENR, 100},
   {905*OVERSAMPLENR, 90},
   {936*OVERSAMPLENR, 80},
   {961*OVERSAMPLENR, 70},
   {979*OVERSAMPLENR, 60},
   {993*OVERSAMPLENR, 50},
   {1003*OVERSAMPLENR, 40},
   {1010*OVERSAMPLENR, 30},
   {1015*OVERSAMPLENR, 20},
   {1018*OVERSAMPLENR, 10},
   {1020*OVERSAMPLENR, 0}
};
#endif

#if (THERMISTORHEATER_0 == 56) || (THERMISTORHEATER_1 == 56) || (THERMISTORHEATER_2 == 56) || (THERMISTORBED == 56) 
// Thermistor lookup table for Marlin
// ./createTemperatureLookupMarlin.py --rp=4520 --t1=20.0:121500.0 --t2=150.0:1256.0 --t3=250.0:175.0 --num-temps=72
// Steinhart-Hart Coefficients: 0.00072778992515513, 0.000229184559182676,  1.34546376457861e-10
//#define NUMTEMPS 71
const short temptable_56[][2] PROGMEM = {
  {(short)(10.29*OVERSAMPLENR), 350}, // v=0.05026084656 r=45.8971714284 res=8.22922788986 C/count
  {(short)(10.89*OVERSAMPLENR), 345}, // v=0.053158395901 r=48.5715874293 res=7.68565303397 C/count
  {(short)(11.52*OVERSAMPLENR), 340}, // v=0.0562724591667 r=51.4493392552 res=7.17016771706 C/count
  {(short)(12.21*OVERSAMPLENR), 335}, // v=0.0596224790056 r=54.5491926397 res=6.68187221659 C/count
  {(short)(12.95*OVERSAMPLENR), 330}, // v=0.0632299098157 r=57.8919388884 res=6.21986343815 C/count
  {(short)(13.75*OVERSAMPLENR), 325}, // v=0.0671184502586 r=61.5006446252 res=5.78323680771 C/count
  {(short)(14.61*OVERSAMPLENR), 320}, // v=0.0713143049499 r=65.4009361354 res=5.37108813927 C/count
  {(short)(15.53*OVERSAMPLENR), 315}, // v=0.0758464791683 r=69.6213236225 res=4.98251547 C/count
  {(short)(16.54*OVERSAMPLENR), 310}, // v=0.0807471109355 r=74.193571597 res=4.61662085504 C/count
  {(short)(17.62*OVERSAMPLENR), 305}, // v=0.0860518453799 r=79.1531226782 res=4.27251211459 C/count
  {(short)(18.80*OVERSAMPLENR), 300}, // v=0.0918002569225 r=84.5395833523 res=3.94930452627 C/count
  {(short)(20.08*OVERSAMPLENR), 295}, // v=0.0980363255158 r=90.3972817338 res=3.64612245649 C/count
  {(short)(21.46*OVERSAMPLENR), 290}, // v=0.104808973914 r=96.7759091663 res=3.36210092466 C/count
  {(short)(22.97*OVERSAMPLENR), 285}, // v=0.112172673767 r=103.731259635 res=3.09638709515 C/count
  {(short)(24.61*OVERSAMPLENR), 280}, // v=0.120188129184 r=111.326083524 res=2.84814169197 C/count
  {(short)(26.40*OVERSAMPLENR), 275}, // v=0.128923047305 r=119.631075321 res=2.61654033213 C/count
  {(short)(28.36*OVERSAMPLENR), 270}, // v=0.138453006309 r=128.726018555 res=2.40077477413 C/count
  {(short)(30.49*OVERSAMPLENR), 265}, // v=0.14886243212 r=138.701115721 res=2.20005407853 C/count
  {(short)(32.82*OVERSAMPLENR), 260}, // v=0.160245695831 r=149.658536288 res=2.01360567845 C/count
  {(short)(35.37*OVERSAMPLENR), 255}, // v=0.172708344364 r=161.714222429 res=1.84067635819 C/count
  {(short)(38.17*OVERSAMPLENR), 250}, // v=0.186368477103 r=175.0 res=1.68053313907 C/count
  {(short)(41.24*OVERSAMPLENR), 245}, // v=0.201358280849 r=189.666051917 res=1.53246407189 C/count
  {(short)(44.61*OVERSAMPLENR), 240}, // v=0.217825734348 r=205.88382283 res=1.39577893642 C/count
  {(short)(48.32*OVERSAMPLENR), 235}, // v=0.235936491336 r=223.849438383 res=1.26980984843 C/count
  {(short)(52.40*OVERSAMPLENR), 230}, // v=0.255875947134 r=243.787739982 res=1.15391177595 C/count
  {(short)(56.90*OVERSAMPLENR), 225}, // v=0.277851487725 r=265.957057736 res=1.04746296642 C/count
  {(short)(61.87*OVERSAMPLENR), 220}, // v=0.302094911027 r=290.65487105 res=0.949865287432 C/count
  {(short)(67.35*OVERSAMPLENR), 215}, // v=0.328864996838 r=318.224539583 res=0.860544484042 C/count
  {(short)(73.41*OVERSAMPLENR), 210}, // v=0.358450183301 r=349.063328523 res=0.778950356366 C/count
  {(short)(80.11*OVERSAMPLENR), 205}, // v=0.391171282134 r=383.632003592 res=0.704556861614 C/count
  {(short)(87.53*OVERSAMPLENR), 200}, // v=0.42738413047 r=422.466335428 res=0.636862145395 C/count
  {(short)(95.74*OVERSAMPLENR), 195}, // v=0.467482031753 r=466.190933677 res=0.575388507706 C/count
  {(short)(104.84*OVERSAMPLENR), 190}, // v=0.511897779583 r=515.53593258 res=0.519682309712 C/count
  {(short)(114.91*OVERSAMPLENR), 185}, // v=0.56110498449 r=571.357178089 res=0.469313828156 C/count
  {(short)(126.08*OVERSAMPLENR), 180}, // v=0.615618332975 r=634.660729009 res=0.423877065102 C/count
  {(short)(138.44*OVERSAMPLENR), 175}, // v=0.675992300615 r=706.632691523 res=0.382989521689 C/count
  {(short)(152.13*OVERSAMPLENR), 170}, // v=0.742817719032 r=788.675670533 res=0.346291945789 C/count
  {(short)(167.26*OVERSAMPLENR), 165}, // v=0.816715466929 r=882.453460034 res=0.313448064859 C/count
  {(short)(183.98*OVERSAMPLENR), 160}, // v=0.898326431211 r=989.946030804 res=0.284144317087 C/count
  {(short)(202.40*OVERSAMPLENR), 155}, // v=0.98829678785 r=1113.51743757 res=0.258089596143 C/count
  {(short)(222.67*OVERSAMPLENR), 150}, // v=1.08725761773 r=1256.0 res=0.235015027656 C/count
  {(short)(244.90*OVERSAMPLENR), 145}, // v=1.19579794802 r=1420.79906671 res=0.214673799126 C/count
  {(short)(269.20*OVERSAMPLENR), 140}, // v=1.31443055587 r=1612.02392266 res=0.196841069596 C/count
  {(short)(295.64*OVERSAMPLENR), 135}, // v=1.4435503576 r=1834.65204697 res=0.181313991391 C/count
  {(short)(324.28*OVERSAMPLENR), 130}, // v=1.58338599833 r=2094.73610684 res=0.167911883991 C/count
  {(short)(355.11*OVERSAMPLENR), 125}, // v=1.73394639238 r=2399.66596851 res=0.156476610319 C/count
  {(short)(388.09*OVERSAMPLENR), 120}, // v=1.89496542204 r=2758.50187576 res=0.146873219121 C/count
  {(short)(423.09*OVERSAMPLENR), 115}, // v=2.06584966007 r=3182.40014372 res=0.138990934916 C/count
  {(short)(459.91*OVERSAMPLENR), 110}, // v=2.24563558463 r=3685.15973627 res=0.132744600631 C/count
  {(short)(498.27*OVERSAMPLENR), 105}, // v=2.43296390583 r=4283.9276313 res=0.128076709772 C/count
  {(short)(537.82*OVERSAMPLENR), 100}, // v=2.62607882451 r=5000.11390829 res=0.124960207675 C/count
  {(short)(578.12*OVERSAMPLENR), 95}, // v=2.8228588158 r=5860.58540438 res=0.123402299324 C/count
  {(short)(618.68*OVERSAMPLENR), 90}, // v=3.02088258961 r=6899.23156322 res=0.123449580297 C/count
  {(short)(658.95*OVERSAMPLENR), 85}, // v=3.21752934323 r=8159.03059955 res=0.125194916094 C/count
  {(short)(698.39*OVERSAMPLENR), 80}, // v=3.41010693167 r=9694.79246008 res=0.128786645671 C/count
  {(short)(736.46*OVERSAMPLENR), 75}, // v=3.59599626883 r=11576.8233191 res=0.13444089521 C/count
  {(short)(772.67*OVERSAMPLENR), 70}, // v=3.77279648571 r=13895.853391 res=0.142458084174 C/count
  {(short)(806.60*OVERSAMPLENR), 65}, // v=3.93845424772 r=16769.7088528 res=0.153245126517 C/count
  {(short)(837.91*OVERSAMPLENR), 60}, // v=4.09136265461 r=20352.4093443 res=0.167345434231 C/count
  {(short)(866.39*OVERSAMPLENR), 55}, // v=4.23041992213 r=24846.6645613 res=0.185479707994 C/count
  {(short)(891.91*OVERSAMPLENR), 50}, // v=4.35504440418 r=30521.1720537 res=0.208601790055 C/count
  {(short)(914.46*OVERSAMPLENR), 45}, // v=4.46514892469 r=37734.7528525 res=0.23797577829 C/count
  {(short)(934.11*OVERSAMPLENR), 40}, // v=4.56108245921 r=46970.3094542 res=0.275283513969 C/count
  {(short)(951.00*OVERSAMPLENR), 35}, // v=4.6435501035 r=58883.0202328 res=0.322776048059 C/count
  {(short)(965.33*OVERSAMPLENR), 30}, // v=4.71352284325 r=74369.3615675 res=0.383489762024 C/count
  {(short)(977.34*OVERSAMPLENR), 25}, // v=4.77214732789 r=94666.899106 res=0.461559220116 C/count
  {(short)(987.27*OVERSAMPLENR), 20}, // v=4.82066338676 r=121500.0 res=0.562677738886 C/count
  {(short)(995.40*OVERSAMPLENR), 15}, // v=4.86033417074 r=157294.812688 res=0.694789084384 C/count
  {(short)(1001.96*OVERSAMPLENR), 10}, // v=4.8923911499 r=205499.900579 res=0.869151563752 C/count
  {(short)(1007.21*OVERSAMPLENR), 5}, // v=4.91799409798 r=271069.920284 res=1.10202404604 C/count
  {(short)(1011.34*OVERSAMPLENR), 0}  // v=4.93820476706 r=361204.003666 res=1.41743803708 C/count
};

#endif

#if (THERMISTORHEATER_0 == 57) || (THERMISTORHEATER_1 == 57) || (THERMISTORHEATER_2 == 57) || (THERMISTORBED == 57) 
// Thermistor lookup table for Marlin
// ./createTemperatureLookupMarlin.py --rp=4680 --t1=21.4:106300.0 --t2=187.0:1023.0 --t3=248.0:281.0 --num-temps=72
// Steinhart-Hart Coefficients: 0.0010359585610369, 0.000141884458935489,  4.62372479066888e-07
//#define NUMTEMPS 71
const short temptable_57[][2] PROGMEM = {
  {(short)(9.94*OVERSAMPLENR), 350}, // v=0.0485534230334 r=45.8916432328 res=6.05736363856 C/count
  {(short)(10.76*OVERSAMPLENR), 345}, // v=0.0525454340825 r=49.7048791918 res=5.56389635554 C/count
  {(short)(11.66*OVERSAMPLENR), 340}, // v=0.0569108365058 r=53.8818350303 res=5.10568745176 C/count
  {(short)(12.63*OVERSAMPLENR), 335}, // v=0.0616879292892 r=58.4611715379 res=4.68077007826 C/count
  {(short)(13.71*OVERSAMPLENR), 330}, // v=0.0669191935282 r=63.4860522255 res=4.28723201807 C/count
  {(short)(14.88*OVERSAMPLENR), 325}, // v=0.0726517618449 r=69.0047118653 res=3.9232200315 C/count
  {(short)(16.17*OVERSAMPLENR), 320}, // v=0.0789379387781 r=75.0711023119 res=3.58694346606 C/count
  {(short)(17.58*OVERSAMPLENR), 315}, // v=0.0858357766869 r=81.7456268533 res=3.27667716029 C/count
  {(short)(19.13*OVERSAMPLENR), 310}, // v=0.0934097117594 r=89.095976096 res=2.9907636777 C/count
  {(short)(20.83*OVERSAMPLENR), 305}, // v=0.101731264631 r=97.1980804231 res=2.72761491183 C/count
  {(short)(22.71*OVERSAMPLENR), 300}, // v=0.110879809841 r=106.137196443 res=2.4857131071 C/count
  {(short)(24.77*OVERSAMPLENR), 295}, // v=0.120943417804 r=116.009147627 res=2.2636113431 C/count
  {(short)(27.04*OVERSAMPLENR), 290}, // v=0.132019772089 r=126.921742581 res=2.05993353114 C/count
  {(short)(29.54*OVERSAMPLENR), 285}, // v=0.144217163419 r=138.996398215 res=1.87337397246 C/count
  {(short)(32.29*OVERSAMPLENR), 280}, // v=0.157655559843 r=152.369999529 res=1.70269652736 C/count
  {(short)(35.32*OVERSAMPLENR), 275}, // v=0.172467749756 r=167.197032981 res=1.54673344346 C/count
  {(short)(38.67*OVERSAMPLENR), 270}, // v=0.188800550716 r=183.6520366 res=1.4043838894 C/count
  {(short)(42.36*OVERSAMPLENR), 265}, // v=0.206816071981 r=201.932417242 res=1.27461223878 C/count
  {(short)(46.43*OVERSAMPLENR), 260}, // v=0.22669301218 r=222.261693981 res=1.15644614605 C/count
  {(short)(50.92*OVERSAMPLENR), 255}, // v=0.248627965112 r=244.893236771 res=1.04897445408 C/count
  {(short)(55.88*OVERSAMPLENR), 250}, // v=0.272836696031 r=270.114581477 res=0.951344969644 C/count
  {(short)(61.35*OVERSAMPLENR), 245}, // v=0.299555337537 r=298.2524166 res=0.862762140583 C/count
  {(short)(67.39*OVERSAMPLENR), 240}, // v=0.329041437966 r=329.67835386 res=0.782484665234 C/count
  {(short)(74.05*OVERSAMPLENR), 235}, // v=0.361574775684 r=364.815614862 res=0.709823061924 C/count
  {(short)(81.40*OVERSAMPLENR), 230}, // v=0.397457829806 r=404.146789906 res=0.644137223431 C/count
  {(short)(89.50*OVERSAMPLENR), 225}, // v=0.437015771625 r=448.222853475 res=0.584833978716 C/count
  {(short)(98.43*OVERSAMPLENR), 220}, // v=0.48059581202 r=497.673654911 res=0.531364681678 C/count
  {(short)(108.25*OVERSAMPLENR), 215}, // v=0.528565709367 r=553.220143483 res=0.483222844379 C/count
  {(short)(119.05*OVERSAMPLENR), 210}, // v=0.581311211948 r=615.688635794 res=0.439941830104 C/count
  {(short)(130.91*OVERSAMPLENR), 205}, // v=0.639232181601 r=686.027492056 res=0.401092619705 C/count
  {(short)(143.92*OVERSAMPLENR), 200}, // v=0.702737125842 r=765.3266382 res=0.366281663114 C/count
  {(short)(158.15*OVERSAMPLENR), 195}, // v=0.772235859897 r=854.840455747 res=0.33514882647 C/count
  {(short)(173.70*OVERSAMPLENR), 190}, // v=0.848130035964 r=956.014663921 res=0.307365444259 C/count
  {(short)(190.63*OVERSAMPLENR), 185}, // v=0.930801323723 r=1070.51794262 res=0.28263248501 C/count
  {(short)(209.02*OVERSAMPLENR), 180}, // v=1.02059711409 r=1200.27919537 res=0.260678838582 C/count
  {(short)(228.93*OVERSAMPLENR), 175}, // v=1.11781375729 r=1347.53153431 res=0.241259732851 C/count
  {(short)(250.40*OVERSAMPLENR), 170}, // v=1.22267754423 r=1514.86429183 res=0.224155287749 C/count
  {(short)(273.47*OVERSAMPLENR), 165}, // v=1.33532389916 r=1705.28463529 res=0.209169215106 C/count
  {(short)(298.14*OVERSAMPLENR), 160}, // v=1.45577556541 r=1922.29069346 res=0.196127673647 C/count
  {(short)(324.39*OVERSAMPLENR), 155}, // v=1.58392091515 r=2169.95851055 res=0.184878289909 C/count
  {(short)(352.15*OVERSAMPLENR), 150}, // v=1.71949386453 r=2453.04564408 res=0.175289357742 C/count
  {(short)(381.35*OVERSAMPLENR), 145}, // v=1.86205717547 r=2777.11483875 res=0.167249231638 C/count
  {(short)(411.85*OVERSAMPLENR), 140}, // v=2.01099111033 r=3148.68196908 res=0.160665932435 C/count
  {(short)(443.49*OVERSAMPLENR), 135}, // v=2.16548940668 r=3575.39338437 res=0.155466988161 C/count
  {(short)(476.07*OVERSAMPLENR), 130}, // v=2.32456429392 r=4066.23895721 res=0.151599538104 C/count
  {(short)(509.35*OVERSAMPLENR), 125}, // v=2.48706174771 r=4631.80858848 res=0.149030734839 C/count
  {(short)(543.07*OVERSAMPLENR), 120}, // v=2.65168738031 r=5284.60173309 res=0.147748487301 C/count
  {(short)(576.93*OVERSAMPLENR), 115}, // v=2.81704236008 r=6039.40177495 res=0.147762598385 C/count
  {(short)(610.65*OVERSAMPLENR), 110}, // v=2.98166766345 r=6913.72992061 res=0.149106363557 C/count
  {(short)(643.91*OVERSAMPLENR), 105}, // v=3.14409394997 r=7928.39685265 res=0.151838713306 C/count
  {(short)(676.43*OVERSAMPLENR), 100}, // v=3.30289358928 r=9108.17489121 res=0.15604700271 C/count
  {(short)(707.94*OVERSAMPLENR), 95}, // v=3.45673100247 r=10482.619114 res=0.161850577224 C/count
  {(short)(738.18*OVERSAMPLENR), 90}, // v=3.60440758938 r=12087.0731239 res=0.169405276476 C/count
  {(short)(766.96*OVERSAMPLENR), 85}, // v=3.74489808929 r=13963.9043717 res=0.178909079337 C/count
  {(short)(794.09*OVERSAMPLENR), 80}, // v=3.87737616923 r=16164.0257178 res=0.190609146562 C/count
  {(short)(819.45*OVERSAMPLENR), 75}, // v=4.00122819135 r=18748.7750189 res=0.204810585347 C/count
  {(short)(842.97*OVERSAMPLENR), 70}, // v=4.11605529009 r=21792.2439511 res=0.221887347976 C/count
  {(short)(864.60*OVERSAMPLENR), 65}, // v=4.22166492022 r=25384.1723699 res=0.242295790915 C/count
  {(short)(884.34*OVERSAMPLENR), 60}, // v=4.31805379469 r=29633.5570192 res=0.266591570021 C/count
  {(short)(902.22*OVERSAMPLENR), 55}, // v=4.40538455858 r=34673.1657102 res=0.295450744374 C/count
  {(short)(918.31*OVERSAMPLENR), 50}, // v=4.483958649 r=40665.2033534 res=0.329696222851 C/count
  {(short)(932.70*OVERSAMPLENR), 45}, // v=4.55418762463 r=47808.4487119 res=0.370331038397 C/count
  {(short)(945.47*OVERSAMPLENR), 40}, // v=4.61656489613 r=56347.2762291 res=0.418580410227 C/count
  {(short)(956.75*OVERSAMPLENR), 35}, // v=4.67163933624 r=66583.1036015 res=0.475945205243 C/count
  {(short)(966.65*OVERSAMPLENR), 30}, // v=4.71999177471 r=78888.9736474 res=0.544270312804 C/count
  {(short)(975.30*OVERSAMPLENR), 25}, // v=4.76221494504 r=93728.2031716 res=0.625832716296 C/count
  {(short)(982.81*OVERSAMPLENR), 20}, // v=4.7988970833 r=111678.332259 res=0.723455856973 C/count
  {(short)(989.31*OVERSAMPLENR), 15}, // v=4.83060909927 r=133462.012939 res=0.840659516568 C/count
  {(short)(994.90*OVERSAMPLENR), 10}, // v=4.85789504674 r=159987.025763 res=0.981858338809 C/count
  {(short)(999.68*OVERSAMPLENR), 5}, // v=4.88126550379 r=192398.361789 res=1.15262799598 C/count
  {(short)(1003.76*OVERSAMPLENR), 0}  // v=4.90119342037 r=232146.33371 res=1.36006711941 C/count
};
#endif

#if (THERMISTORHEATER_0 == 58) || (THERMISTORHEATER_1 == 58) || (THERMISTORHEATER_2 == 58) || (THERMISTORBED == 58) 
// Thermistor lookup table for Marlin
// ./createTemperatureLookupMarlin.py --rp=4670 --t1=21.7:110700.0 --t2=190.0:623.0 --t3=259.0:192.0 --num-temps=72
// Steinhart-Hart Coefficients: 0.000628880185153421, 0.000237797441570631,  4.83564555883192e-10
//#define NUMTEMPS 71
const short temptable_58[][2] PROGMEM = {
  {(short)(13.11*OVERSAMPLENR), 350}, // v=0.0640100384633 r=60.560674141 res=6.80515641885 C/count
  {(short)(13.83*OVERSAMPLENR), 345}, // v=0.0675522741536 r=63.9579247124 res=6.36580595552 C/count
  {(short)(14.61*OVERSAMPLENR), 340}, // v=0.0713502700501 r=67.6058919565 res=5.94881435018 C/count
  {(short)(15.45*OVERSAMPLENR), 335}, // v=0.0754262553995 r=71.5271272162 res=5.55345606911 C/count
  {(short)(16.34*OVERSAMPLENR), 330}, // v=0.0798046835241 r=75.7465604688 res=5.17900636341 C/count
  {(short)(17.31*OVERSAMPLENR), 325}, // v=0.0845124794832 r=80.2917874451 res=4.82474247533 C/count
  {(short)(18.35*OVERSAMPLENR), 320}, // v=0.0895793174457 r=85.1933957425 res=4.48994482311 C/count
  {(short)(19.46*OVERSAMPLENR), 315}, // v=0.0950379314615 r=90.4853358137 res=4.17389816003 C/count
  {(short)(20.67*OVERSAMPLENR), 310}, // v=0.100924463756 r=96.2053436923 res=3.87589270413 C/count
  {(short)(21.97*OVERSAMPLENR), 305}, // v=0.107278855147 r=102.395423468 res=3.59522523456 C/count
  {(short)(23.38*OVERSAMPLENR), 300}, // v=0.114145282714 r=109.102398888 res=3.33120015131 C/count
  {(short)(24.90*OVERSAMPLENR), 295}, // v=0.121572650381 r=116.378545091 res=3.08313049496 C/count
  {(short)(26.55*OVERSAMPLENR), 290}, // v=0.129615138674 r=124.282313378 res=2.85033892357 C/count
  {(short)(28.33*OVERSAMPLENR), 285}, // v=0.138332820495 r=132.879164257 res=2.63215864401 C/count
  {(short)(30.27*OVERSAMPLENR), 280}, // v=0.147792350344 r=142.242526689 res=2.42793429526 C/count
  {(short)(32.37*OVERSAMPLENR), 275}, // v=0.158067734977 r=152.454904765 res=2.23702278165 C/count
  {(short)(34.66*OVERSAMPLENR), 270}, // v=0.169241193954 r=163.609156966 res=2.05879405417 C/count
  {(short)(37.15*OVERSAMPLENR), 265}, // v=0.18140411886 r=175.809977839 res=1.89263183847 C/count
  {(short)(39.87*OVERSAMPLENR), 260}, // v=0.194658140115 r=189.175617645 res=1.73793430826 C/count
  {(short)(42.83*OVERSAMPLENR), 255}, // v=0.209116310014 r=203.83988236 res=1.59411470335 C/count
  {(short)(46.06*OVERSAMPLENR), 250}, // v=0.224904409951 r=219.954464715 res=1.46060189174 C/count
  {(short)(49.59*OVERSAMPLENR), 245}, // v=0.242162388314 r=237.69166704 res=1.33684087565 C/count
  {(short)(53.46*OVERSAMPLENR), 240}, // v=0.261045933123 r=257.247588915 res=1.22229324161 C/count
  {(short)(57.70*OVERSAMPLENR), 235}, // v=0.281728179725 r=278.845867604 res=1.11643755502 C/count
  {(short)(62.34*OVERSAMPLENR), 230}, // v=0.304401548274 r=302.742077512 res=1.0187697001 C/count
  {(short)(67.44*OVERSAMPLENR), 225}, // v=0.329279697721 r=329.228917348 res=0.928803166355 C/count
  {(short)(73.03*OVERSAMPLENR), 220}, // v=0.356599571963 r=358.642341292 res=0.846069283105 C/count
  {(short)(79.18*OVERSAMPLENR), 215}, // v=0.386623498576 r=391.368824502 res=0.77011740395 C/count
  {(short)(85.94*OVERSAMPLENR), 210}, // v=0.419641280279 r=427.853995466 res=0.700515043543 C/count
  {(short)(93.38*OVERSAMPLENR), 205}, // v=0.455972192615 r=468.612920029 res=0.636847969345 C/count
  {(short)(101.57*OVERSAMPLENR), 200}, // v=0.495966766905 r=514.242387118 res=0.578720251591 C/count
  {(short)(110.59*OVERSAMPLENR), 195}, // v=0.540008194006 r=565.435627621 res=0.52575427516 C/count
  {(short)(120.53*OVERSAMPLENR), 190}, // v=0.58851313055 r=623.0 res=0.477590717654 C/count
  {(short)(131.47*OVERSAMPLENR), 185}, // v=0.641931624394 r=687.878304687 res=0.433888498665 C/count
  {(short)(143.51*OVERSAMPLENR), 180}, // v=0.70074580027 r=761.1745515 res=0.394324705968 C/count
  {(short)(156.77*OVERSAMPLENR), 175}, // v=0.765466862029 r=844.185209845 res=0.358594505373 C/count
  {(short)(171.34*OVERSAMPLENR), 170}, // v=0.836629879159 r=938.437232884 res=0.326411042065 C/count
  {(short)(187.35*OVERSAMPLENR), 165}, // v=0.914785741126 r=1045.73448058 res=0.297505342683 C/count
  {(short)(204.90*OVERSAMPLENR), 160}, // v=1.00048959789 r=1168.21459439 res=0.271626229117 C/count
  {(short)(224.11*OVERSAMPLENR), 155}, // v=1.09428508023 r=1308.41892705 res=0.248540257164 C/count
  {(short)(245.08*OVERSAMPLENR), 150}, // v=1.19668363866 r=1469.37884246 res=0.228031695902 C/count
  {(short)(267.91*OVERSAMPLENR), 145}, // v=1.30813849317 r=1654.72262484 res=0.209902567135 C/count
  {(short)(292.66*OVERSAMPLENR), 140}, // v=1.4290129903 r=1868.80844052 res=0.193972768648 C/count
  {(short)(319.39*OVERSAMPLENR), 135}, // v=1.55954366234 r=2116.89037393 res=0.180080310737 C/count
  {(short)(348.12*OVERSAMPLENR), 130}, // v=1.69979900539 r=2405.3266356 res=0.168081702835 C/count
  {(short)(378.81*OVERSAMPLENR), 125}, // v=1.84963593759 r=2741.84178635 res=0.157852536634 C/count
  {(short)(411.37*OVERSAMPLENR), 120}, // v=2.00865701259 r=3135.85847168 res=0.149288324647 C/count
  {(short)(445.68*OVERSAMPLENR), 115}, // v=2.17617261769 r=3598.91903743 res=0.142305669656 C/count
  {(short)(481.52*OVERSAMPLENR), 110}, // v=2.35117336351 r=4145.22394796 res=0.136843862305 C/count
  {(short)(518.62*OVERSAMPLENR), 105}, // v=2.53231837978 r=4792.32277645 res=0.132867033168 C/count
  {(short)(556.64*OVERSAMPLENR), 100}, // v=2.7179449452 r=5562.00555608 res=0.130367024513 C/count
  {(short)(595.17*OVERSAMPLENR), 95}, // v=2.90610353167 r=6481.45870544 res=0.129367199405 C/count
  {(short)(633.78*OVERSAMPLENR), 90}, // v=3.09461984422 r=7584.77232411 res=0.129927476924 C/count
  {(short)(671.99*OVERSAMPLENR), 85}, // v=3.28118197754 r=8914.91689925 res=0.132150979356 C/count
  {(short)(709.31*OVERSAMPLENR), 80}, // v=3.46344691372 r=10526.350981 res=0.136192810957 C/count
  {(short)(745.30*OVERSAMPLENR), 75}, // v=3.63915703913 r=12488.4824049 res=0.142271673219 C/count
  {(short)(779.52*OVERSAMPLENR), 70}, // v=3.8062550279 r=14890.2918092 res=0.150685280964 C/count
  {(short)(811.62*OVERSAMPLENR), 65}, // v=3.96298499378 r=17846.5497702 res=0.16183090964 C/count
  {(short)(841.31*OVERSAMPLENR), 60}, // v=4.1079694852 r=21506.2345712 res=0.176232926133 C/count
  {(short)(868.40*OVERSAMPLENR), 55}, // v=4.24025537462 r=26064.0114298 res=0.194579907634 C/count
  {(short)(892.79*OVERSAMPLENR), 50}, // v=4.35932619118 r=31776.0036896 res=0.217775050246 C/count
  {(short)(914.45*OVERSAMPLENR), 45}, // v=4.46508297038 r=38981.6295183 res=0.247005190971 C/count
  {(short)(933.44*OVERSAMPLENR), 40}, // v=4.55779934195 r=48134.0824342 res=0.283836200517 C/count
  {(short)(949.87*OVERSAMPLENR), 35}, // v=4.63805877932 r=59843.2376908 res=0.330346219532 C/count
  {(short)(963.93*OVERSAMPLENR), 30}, // v=4.7066825538 r=74936.5842739 res=0.389313994053 C/count
  {(short)(975.80*OVERSAMPLENR), 25}, // v=4.7646562104 r=94546.5548078 res=0.46448877464 C/count
  {(short)(985.71*OVERSAMPLENR), 20}, // v=4.81306076596 r=120236.898867 res=0.560983300266 C/count
  {(short)(993.90*OVERSAMPLENR), 15}, // v=4.85301283098 r=154187.403379 res=0.685856784065 C/count
  {(short)(1000.57*OVERSAMPLENR), 10}, // v=4.88561589605 r=199466.756708 res=0.84899926192 C/count
  {(short)(1005.96*OVERSAMPLENR), 5}, // v=4.91192338145 r=260440.086915 res=1.06450993355 C/count
  {(short)(1010.26*OVERSAMPLENR), 0}  // v=4.93291284882 r=343384.72565 res=1.35291877036 C/count
};
#endif

#if (THERMISTORHEATER_0 == 60) || (THERMISTORHEATER_1 == 60) || (THERMISTORHEATER_2 == 60) || (THERMISTORBED == 60) // Maker's Tool Works Kapton Bed Thermister
const short temptable_60[][2] PROGMEM = {
   {51*OVERSAMPLENR, 272},
   {61*OVERSAMPLENR, 258},
   {71*OVERSAMPLENR, 247},
   {81*OVERSAMPLENR, 237},
   {91*OVERSAMPLENR, 229},
   {101*OVERSAMPLENR, 221},
   {131*OVERSAMPLENR, 204},
   {161*OVERSAMPLENR, 190},
   {191*OVERSAMPLENR, 179},
   {231*OVERSAMPLENR, 167},
   {271*OVERSAMPLENR, 157},
   {311*OVERSAMPLENR, 148},
   {351*OVERSAMPLENR, 140},
   {381*OVERSAMPLENR, 135},
   {411*OVERSAMPLENR, 130},
   {441*OVERSAMPLENR, 125},
   {451*OVERSAMPLENR, 123},
   {461*OVERSAMPLENR, 122},
   {471*OVERSAMPLENR, 120},
   {481*OVERSAMPLENR, 119},
   {491*OVERSAMPLENR, 117},
   {501*OVERSAMPLENR, 116},
   {511*OVERSAMPLENR, 114},
   {521*OVERSAMPLENR, 113},
   {531*OVERSAMPLENR, 111},
   {541*OVERSAMPLENR, 110},
   {551*OVERSAMPLENR, 108},
   {561*OVERSAMPLENR, 107},
   {571*OVERSAMPLENR, 105},
   {581*OVERSAMPLENR, 104},
   {591*OVERSAMPLENR, 102},
   {601*OVERSAMPLENR, 101},
   {611*OVERSAMPLENR, 100},
   {621*OVERSAMPLENR, 98},
   {631*OVERSAMPLENR, 97},
   {641*OVERSAMPLENR, 95},
   {651*OVERSAMPLENR, 94},
   {661*OVERSAMPLENR, 92},
   {671*OVERSAMPLENR, 91},
   {681*OVERSAMPLENR, 90},
   {691*OVERSAMPLENR, 88},
   {701*OVERSAMPLENR, 87},
   {711*OVERSAMPLENR, 85},
   {721*OVERSAMPLENR, 84},
   {731*OVERSAMPLENR, 82},
   {741*OVERSAMPLENR, 81},
   {751*OVERSAMPLENR, 79},
   {761*OVERSAMPLENR, 77},
   {771*OVERSAMPLENR, 76},
   {781*OVERSAMPLENR, 74},
   {791*OVERSAMPLENR, 72},
   {801*OVERSAMPLENR, 71},
   {811*OVERSAMPLENR, 69},
   {821*OVERSAMPLENR, 67},
   {831*OVERSAMPLENR, 65},
   {841*OVERSAMPLENR, 63},
   {851*OVERSAMPLENR, 62},
   {861*OVERSAMPLENR, 60},
   {871*OVERSAMPLENR, 57},
   {881*OVERSAMPLENR, 55},
   {891*OVERSAMPLENR, 53},
   {901*OVERSAMPLENR, 51},
   {911*OVERSAMPLENR, 48},
   {921*OVERSAMPLENR, 45},
   {931*OVERSAMPLENR, 42},
   {941*OVERSAMPLENR, 39},
   {951*OVERSAMPLENR, 36},
   {961*OVERSAMPLENR, 32},
   {981*OVERSAMPLENR, 23},
   {991*OVERSAMPLENR, 17},
   {1001*OVERSAMPLENR, 9},
   {1008*OVERSAMPLENR, 0},
};
#endif


#define _TT_NAME(_N) temptable_ ## _N
#define TT_NAME(_N) _TT_NAME(_N)

#ifdef THERMISTORHEATER_0
# define HEATER_0_TEMPTABLE TT_NAME(THERMISTORHEATER_0)
# define HEATER_0_TEMPTABLE_LEN (sizeof(HEATER_0_TEMPTABLE)/sizeof(*HEATER_0_TEMPTABLE))
#else
# ifdef HEATER_0_USES_THERMISTOR
#  error No heater 0 thermistor table specified
# else  // HEATER_0_USES_THERMISTOR
#  define HEATER_0_TEMPTABLE NULL
#  define HEATER_0_TEMPTABLE_LEN 0
# endif // HEATER_0_USES_THERMISTOR
#endif

//Set the high and low raw values for the heater, this indicates which raw value is a high or low temperature
#ifndef HEATER_0_RAW_HI_TEMP
# ifdef HEATER_0_USES_THERMISTOR   //In case of a thermistor the highest temperature results in the lowest ADC value
#  define HEATER_0_RAW_HI_TEMP 0
#  define HEATER_0_RAW_LO_TEMP 16383
# else                          //In case of an thermocouple the highest temperature results in the highest ADC value
#  define HEATER_0_RAW_HI_TEMP 16383
#  define HEATER_0_RAW_LO_TEMP 0
# endif
#endif

#ifdef THERMISTORHEATER_1
# define HEATER_1_TEMPTABLE TT_NAME(THERMISTORHEATER_1)
# define HEATER_1_TEMPTABLE_LEN (sizeof(HEATER_1_TEMPTABLE)/sizeof(*HEATER_1_TEMPTABLE))
#else
# ifdef HEATER_1_USES_THERMISTOR
#  error No heater 1 thermistor table specified
# else  // HEATER_1_USES_THERMISTOR
#  define HEATER_1_TEMPTABLE NULL
#  define HEATER_1_TEMPTABLE_LEN 0
# endif // HEATER_1_USES_THERMISTOR
#endif

//Set the high and low raw values for the heater, this indicates which raw value is a high or low temperature
#ifndef HEATER_1_RAW_HI_TEMP
# ifdef HEATER_1_USES_THERMISTOR   //In case of a thermistor the highest temperature results in the lowest ADC value
#  define HEATER_1_RAW_HI_TEMP 0
#  define HEATER_1_RAW_LO_TEMP 16383
# else                          //In case of an thermocouple the highest temperature results in the highest ADC value
#  define HEATER_1_RAW_HI_TEMP 16383
#  define HEATER_1_RAW_LO_TEMP 0
# endif
#endif

#ifdef THERMISTORHEATER_2
# define HEATER_2_TEMPTABLE TT_NAME(THERMISTORHEATER_2)
# define HEATER_2_TEMPTABLE_LEN (sizeof(HEATER_2_TEMPTABLE)/sizeof(*HEATER_2_TEMPTABLE))
#else
# ifdef HEATER_2_USES_THERMISTOR
#  error No heater 2 thermistor table specified
# else  // HEATER_2_USES_THERMISTOR
#  define HEATER_2_TEMPTABLE NULL
#  define HEATER_2_TEMPTABLE_LEN 0
# endif // HEATER_2_USES_THERMISTOR
#endif

//Set the high and low raw values for the heater, this indicates which raw value is a high or low temperature
#ifndef HEATER_2_RAW_HI_TEMP
# ifdef HEATER_2_USES_THERMISTOR   //In case of a thermistor the highest temperature results in the lowest ADC value
#  define HEATER_2_RAW_HI_TEMP 0
#  define HEATER_2_RAW_LO_TEMP 16383
# else                          //In case of an thermocouple the highest temperature results in the highest ADC value
#  define HEATER_2_RAW_HI_TEMP 16383
#  define HEATER_2_RAW_LO_TEMP 0
# endif
#endif

#ifdef THERMISTORBED
# define BEDTEMPTABLE TT_NAME(THERMISTORBED)
# define BEDTEMPTABLE_LEN (sizeof(BEDTEMPTABLE)/sizeof(*BEDTEMPTABLE))
#else
# ifdef BED_USES_THERMISTOR
#  error No bed thermistor table specified
# endif // BED_USES_THERMISTOR
#endif

//Set the high and low raw values for the heater, this indicates which raw value is a high or low temperature
#ifndef HEATER_BED_RAW_HI_TEMP
# ifdef BED_USES_THERMISTOR   //In case of a thermistor the highest temperature results in the lowest ADC value
#  define HEATER_BED_RAW_HI_TEMP 0
#  define HEATER_BED_RAW_LO_TEMP 16383
# else                          //In case of an thermocouple the highest temperature results in the highest ADC value
#  define HEATER_BED_RAW_HI_TEMP 16383
#  define HEATER_BED_RAW_LO_TEMP 0
# endif
#endif

#endif //THERMISTORTABLES_H_
